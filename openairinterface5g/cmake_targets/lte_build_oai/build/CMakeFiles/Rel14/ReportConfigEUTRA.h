/*
 * Generated by asn1c-0.9.24 (http://lionet.info/asn1c)
 * From ASN.1 module "EUTRA-RRC-Definitions"
 * 	found in "fixed_grammar.asn"
 * 	`asn1c -gen-PER`
 */

#ifndef	_ReportConfigEUTRA_H_
#define	_ReportConfigEUTRA_H_


#include <asn_application.h>

/* Including external dependencies */
#include <NativeEnumerated.h>
#include <NativeInteger.h>
#include "ReportInterval.h"
#include "Hysteresis.h"
#include "TimeToTrigger.h"
#include "ThresholdEUTRA.h"
#include <constr_SEQUENCE.h>
#include <BOOLEAN.h>
#include "ThresholdEUTRA-v1250.h"
#include "MeasCSI-RS-Id-r12.h"
#include <constr_CHOICE.h>
#include <NULL.h>
#include "RS-SINR-Range-r13.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum ReportConfigEUTRA__triggerType_PR {
	ReportConfigEUTRA__triggerType_PR_NOTHING,	/* No components present */
	ReportConfigEUTRA__triggerType_PR_event,
	ReportConfigEUTRA__triggerType_PR_periodical
} ReportConfigEUTRA__triggerType_PR;
typedef enum ReportConfigEUTRA__triggerType__event__eventId_PR {
	ReportConfigEUTRA__triggerType__event__eventId_PR_NOTHING,	/* No components present */
	ReportConfigEUTRA__triggerType__event__eventId_PR_eventA1,
	ReportConfigEUTRA__triggerType__event__eventId_PR_eventA2,
	ReportConfigEUTRA__triggerType__event__eventId_PR_eventA3,
	ReportConfigEUTRA__triggerType__event__eventId_PR_eventA4,
	ReportConfigEUTRA__triggerType__event__eventId_PR_eventA5,
	/* Extensions may appear below */
	ReportConfigEUTRA__triggerType__event__eventId_PR_eventA6_r10,
	ReportConfigEUTRA__triggerType__event__eventId_PR_eventC1_r12,
	ReportConfigEUTRA__triggerType__event__eventId_PR_eventC2_r12
} ReportConfigEUTRA__triggerType__event__eventId_PR;
typedef enum ReportConfigEUTRA__triggerType__periodical__purpose {
	ReportConfigEUTRA__triggerType__periodical__purpose_reportStrongestCells	= 0,
	ReportConfigEUTRA__triggerType__periodical__purpose_reportCGI	= 1
} e_ReportConfigEUTRA__triggerType__periodical__purpose;
typedef enum ReportConfigEUTRA__triggerQuantity {
	ReportConfigEUTRA__triggerQuantity_rsrp	= 0,
	ReportConfigEUTRA__triggerQuantity_rsrq	= 1
} e_ReportConfigEUTRA__triggerQuantity;
typedef enum ReportConfigEUTRA__reportQuantity {
	ReportConfigEUTRA__reportQuantity_sameAsTriggerQuantity	= 0,
	ReportConfigEUTRA__reportQuantity_both	= 1
} e_ReportConfigEUTRA__reportQuantity;
typedef enum ReportConfigEUTRA__reportAmount {
	ReportConfigEUTRA__reportAmount_r1	= 0,
	ReportConfigEUTRA__reportAmount_r2	= 1,
	ReportConfigEUTRA__reportAmount_r4	= 2,
	ReportConfigEUTRA__reportAmount_r8	= 3,
	ReportConfigEUTRA__reportAmount_r16	= 4,
	ReportConfigEUTRA__reportAmount_r32	= 5,
	ReportConfigEUTRA__reportAmount_r64	= 6,
	ReportConfigEUTRA__reportAmount_infinity	= 7
} e_ReportConfigEUTRA__reportAmount;
typedef enum ReportConfigEUTRA__ext1__si_RequestForHO_r9 {
	ReportConfigEUTRA__ext1__si_RequestForHO_r9_setup	= 0
} e_ReportConfigEUTRA__ext1__si_RequestForHO_r9;
typedef enum ReportConfigEUTRA__ext1__ue_RxTxTimeDiffPeriodical_r9 {
	ReportConfigEUTRA__ext1__ue_RxTxTimeDiffPeriodical_r9_setup	= 0
} e_ReportConfigEUTRA__ext1__ue_RxTxTimeDiffPeriodical_r9;
typedef enum ReportConfigEUTRA__ext2__includeLocationInfo_r10 {
	ReportConfigEUTRA__ext2__includeLocationInfo_r10_true	= 0
} e_ReportConfigEUTRA__ext2__includeLocationInfo_r10;
typedef enum ReportConfigEUTRA__ext2__reportAddNeighMeas_r10 {
	ReportConfigEUTRA__ext2__reportAddNeighMeas_r10_setup	= 0
} e_ReportConfigEUTRA__ext2__reportAddNeighMeas_r10;
typedef enum ReportConfigEUTRA__ext3__alternativeTimeToTrigger_r12_PR {
	ReportConfigEUTRA__ext3__alternativeTimeToTrigger_r12_PR_NOTHING,	/* No components present */
	ReportConfigEUTRA__ext3__alternativeTimeToTrigger_r12_PR_release,
	ReportConfigEUTRA__ext3__alternativeTimeToTrigger_r12_PR_setup
} ReportConfigEUTRA__ext3__alternativeTimeToTrigger_r12_PR;
typedef enum ReportConfigEUTRA__ext4__rs_sinr_Config_r13_PR {
	ReportConfigEUTRA__ext4__rs_sinr_Config_r13_PR_NOTHING,	/* No components present */
	ReportConfigEUTRA__ext4__rs_sinr_Config_r13_PR_release,
	ReportConfigEUTRA__ext4__rs_sinr_Config_r13_PR_setup
} ReportConfigEUTRA__ext4__rs_sinr_Config_r13_PR;
typedef enum ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup__triggerQuantity_v1310 {
	ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup__triggerQuantity_v1310_sinr	= 0
} e_ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup__triggerQuantity_v1310;
typedef enum ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup__reportQuantity_v1310 {
	ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup__reportQuantity_v1310_rsrpANDsinr	= 0,
	ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup__reportQuantity_v1310_rsrqANDsinr	= 1,
	ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup__reportQuantity_v1310_all	= 2
} e_ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup__reportQuantity_v1310;
typedef enum ReportConfigEUTRA__ext4__includeMultiBandInfo_r13 {
	ReportConfigEUTRA__ext4__includeMultiBandInfo_r13_true	= 0
} e_ReportConfigEUTRA__ext4__includeMultiBandInfo_r13;

/* Forward declarations */
struct RSRQ_RangeConfig_r12;
struct MeasRSSI_ReportConfig_r13;
struct UL_DelayConfig_r13;

/* ReportConfigEUTRA */
typedef struct ReportConfigEUTRA {
	struct ReportConfigEUTRA__triggerType {
		ReportConfigEUTRA__triggerType_PR present;
		union ReportConfigEUTRA__triggerType_u {
			struct ReportConfigEUTRA__triggerType__event {
				struct ReportConfigEUTRA__triggerType__event__eventId {
					ReportConfigEUTRA__triggerType__event__eventId_PR present;
					union ReportConfigEUTRA__triggerType__event__eventId_u {
						struct ReportConfigEUTRA__triggerType__event__eventId__eventA1 {
							ThresholdEUTRA_t	 a1_Threshold;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} eventA1;
						struct ReportConfigEUTRA__triggerType__event__eventId__eventA2 {
							ThresholdEUTRA_t	 a2_Threshold;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} eventA2;
						struct ReportConfigEUTRA__triggerType__event__eventId__eventA3 {
							long	 a3_Offset;
							BOOLEAN_t	 reportOnLeave;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} eventA3;
						struct ReportConfigEUTRA__triggerType__event__eventId__eventA4 {
							ThresholdEUTRA_t	 a4_Threshold;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} eventA4;
						struct ReportConfigEUTRA__triggerType__event__eventId__eventA5 {
							ThresholdEUTRA_t	 a5_Threshold1;
							ThresholdEUTRA_t	 a5_Threshold2;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} eventA5;
						/*
						 * This type is extensible,
						 * possible extensions are below.
						 */
						struct ReportConfigEUTRA__triggerType__event__eventId__eventA6_r10 {
							long	 a6_Offset_r10;
							BOOLEAN_t	 a6_ReportOnLeave_r10;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} eventA6_r10;
						struct ReportConfigEUTRA__triggerType__event__eventId__eventC1_r12 {
							ThresholdEUTRA_v1250_t	 c1_Threshold_r12;
							BOOLEAN_t	 c1_ReportOnLeave_r12;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} eventC1_r12;
						struct ReportConfigEUTRA__triggerType__event__eventId__eventC2_r12 {
							MeasCSI_RS_Id_r12_t	 c2_RefCSI_RS_r12;
							long	 c2_Offset_r12;
							BOOLEAN_t	 c2_ReportOnLeave_r12;
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} eventC2_r12;
					} choice;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} eventId;
				Hysteresis_t	 hysteresis;
				TimeToTrigger_t	 timeToTrigger;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} event;
			struct ReportConfigEUTRA__triggerType__periodical {
				long	 purpose;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} periodical;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} triggerType;
	long	 triggerQuantity;
	long	 reportQuantity;
	long	 maxReportCells;
	ReportInterval_t	 reportInterval;
	long	 reportAmount;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	struct ReportConfigEUTRA__ext1 {
		long	*si_RequestForHO_r9	/* OPTIONAL */;
		long	*ue_RxTxTimeDiffPeriodical_r9	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext1;
	struct ReportConfigEUTRA__ext2 {
		long	*includeLocationInfo_r10	/* OPTIONAL */;
		long	*reportAddNeighMeas_r10	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext2;
	struct ReportConfigEUTRA__ext3 {
		struct ReportConfigEUTRA__ext3__alternativeTimeToTrigger_r12 {
			ReportConfigEUTRA__ext3__alternativeTimeToTrigger_r12_PR present;
			union ReportConfigEUTRA__ext3__alternativeTimeToTrigger_r12_u {
				NULL_t	 release;
				TimeToTrigger_t	 setup;
			} choice;
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} *alternativeTimeToTrigger_r12;
		BOOLEAN_t	*useT312_r12	/* OPTIONAL */;
		BOOLEAN_t	*usePSCell_r12	/* OPTIONAL */;
		struct RSRQ_RangeConfig_r12	*aN_Threshold1_v1250	/* OPTIONAL */;
		struct RSRQ_RangeConfig_r12	*a5_Threshold2_v1250	/* OPTIONAL */;
		BOOLEAN_t	*reportStrongestCSI_RSs_r12	/* OPTIONAL */;
		BOOLEAN_t	*reportCRS_Meas_r12	/* OPTIONAL */;
		BOOLEAN_t	*triggerQuantityCSI_RS_r12	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext3;
	struct ReportConfigEUTRA__ext4 {
		BOOLEAN_t	*reportSSTD_Meas_r13	/* OPTIONAL */;
		struct ReportConfigEUTRA__ext4__rs_sinr_Config_r13 {
			ReportConfigEUTRA__ext4__rs_sinr_Config_r13_PR present;
			union ReportConfigEUTRA__ext4__rs_sinr_Config_r13_u {
				NULL_t	 release;
				struct ReportConfigEUTRA__ext4__rs_sinr_Config_r13__setup {
					long	*triggerQuantity_v1310	/* OPTIONAL */;
					RS_SINR_Range_r13_t	*aN_Threshold1_r13	/* OPTIONAL */;
					RS_SINR_Range_r13_t	*a5_Threshold2_r13	/* OPTIONAL */;
					long	 reportQuantity_v1310;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} setup;
			} choice;
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} *rs_sinr_Config_r13;
		BOOLEAN_t	*useWhiteCellList_r13	/* OPTIONAL */;
		struct MeasRSSI_ReportConfig_r13	*measRSSI_ReportConfig_r13	/* OPTIONAL */;
		long	*includeMultiBandInfo_r13	/* OPTIONAL */;
		struct UL_DelayConfig_r13	*ul_DelayConfig_r13	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext4;
	struct ReportConfigEUTRA__ext5 {
		BOOLEAN_t	*ue_RxTxTimeDiffPeriodicalTDD_r13	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext5;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} ReportConfigEUTRA_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_purpose_31;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_triggerQuantity_34;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_reportQuantity_37;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_reportAmount_42;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_si_RequestForHO_r9_53;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_ue_RxTxTimeDiffPeriodical_r9_55;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_includeLocationInfo_r10_58;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_reportAddNeighMeas_r10_60;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_triggerQuantity_v1310_78;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_reportQuantity_v1310_82;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_includeMultiBandInfo_r13_88;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_ReportConfigEUTRA;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "RSRQ-RangeConfig-r12.h"
#include "MeasRSSI-ReportConfig-r13.h"
#include "UL-DelayConfig-r13.h"

#endif	/* _ReportConfigEUTRA_H_ */
#include <asn_internal.h>
